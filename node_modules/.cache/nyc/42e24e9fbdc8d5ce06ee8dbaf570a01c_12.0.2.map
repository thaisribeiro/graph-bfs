{"version":3,"sources":["graph.js"],"names":["Graph","adjacentList","Map","vertex","has","set","node","arr","get","includes","push","mapAdjacent","forEach","value","key","startNode","visitedObject","keys","graphVisited","visited","queue","length","current","pop","elem","unshift"],"mappings":"kzBAAA;;;AAGqBA,K;AACnB,mBAAe;AACb,SAAKC,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AACD;;AAED;;;;AAIWC,U,EAAQ;AACjB,UAAI,CAAC,KAAKF,YAAL,CAAkBG,GAAlB,CAAsBD,MAAtB,CAAL,EAAoC,KAAKF,YAAL,CAAkBI,GAAlB,CAAsBF,MAAtB,EAA8B,EAA9B;AACrC;;AAED;;;;;AAKSA,U,EAAQG,I,EAAM;AACrB,UAAI,KAAKL,YAAL,CAAkBG,GAAlB,CAAsBD,MAAtB,KAAiC,KAAKF,YAAL,CAAkBG,GAAlB,CAAsBE,IAAtB,CAArC,EAAkE;AAChE,YAAIC,MAAM,KAAKN,YAAL,CAAkBO,GAAlB,CAAsBL,MAAtB,CAAV;AACA,YAAI,CAACI,IAAIE,QAAJ,CAAaH,IAAb,CAAL,EAAyBC,IAAIG,IAAJ,CAASJ,IAAT;AAC1B;AACF;;AAED;;;AAGS;AACP,UAAMK,cAAc,EAApB;AACA,WAAKV,YAAL,CAAkBW,OAAlB,CAA0B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACxCH,oBAAYD,IAAZ;AACGI,WADH,EACSD,KADT;;AAGD,OAJD;;AAMA,aAAOF,WAAP;AACD;;AAED;;;;AAIWI,e;AACHC,6B,GAAgB,SAAhBA,aAAgB,GAAM;AAC1B,sBAAIT,MAAM,EAAV,CAD0B;AAE1B,yCAAgB,MAAKN,YAAL,CAAkBgB,IAAlB,EAAhB,8HAA0C,KAAjCH,GAAiC;AACxCP,0BAAIO,GAAJ,IAAW,KAAX;AACD,qBAJyB;AAK1B,yBAAOP,GAAP;AACD,iB;AACKW,4B,GAAe,E;AACDF,iC,SAAhBG,O;AACAC,qB,GAAQ,E;;AAEZD,wBAAQJ,SAAR,IAAqB,IAArB;AACAK,sBAAMV,IAAN,CAAWK,SAAX;;AAEA,uBAAOK,MAAMC,MAAb,EAAqB;AACfC,yBADe,GACLF,MAAMG,GAAN,EADK;AAEnBL,+BAAaR,IAAb,CAAkBY,OAAlB;;AAEIf,qBAJe,GAIT,KAAKN,YAAL,CAAkBO,GAAlB,CAAsBc,OAAtB,CAJS;;AAMnBf,sBAAIK,OAAJ,CAAY,gBAAQ;AAClB,wBAAI,CAACO,QAAQK,IAAR,CAAL,EAAoB;AAClBL,8BAAQK,IAAR,IAAgB,IAAhB;AACAJ,4BAAMK,OAAN,CAAcD,IAAd;AACD;AACF,mBALD;AAMD,iB;;AAEMN,4B,gLAxEUlB,K","file":"graph.js","sourceRoot":"/home/thais/Documentos/graph-bfs/src/handlers","sourcesContent":["/**\n * Class responsible for manipulating graph\n */\nexport default class Graph {\n  constructor () {\n    this.adjacentList = new Map()\n  }\n\n  /**\n   * Add vertex in adjacent list\n   * @param {*} vertex\n   */\n  addVertex (vertex) {\n    if (!this.adjacentList.has(vertex)) this.adjacentList.set(vertex, [])\n  }\n\n  /**\n   * Add edge\n   * @param {*} vertex\n   * @param {*} node\n   */\n  addEdge (vertex, node) {\n    if (this.adjacentList.has(vertex) && this.adjacentList.has(node)) {\n      let arr = this.adjacentList.get(vertex)\n      if (!arr.includes(node)) arr.push(node)\n    }\n  }\n\n  /**\n   * Prints what is in the adjacent list\n   */\n  print () {\n    const mapAdjacent = []\n    this.adjacentList.forEach((value, key) => {\n      mapAdjacent.push({\n        [key]: value\n      })\n    })\n\n    return mapAdjacent\n  }\n\n  /**\n   * Breath First Search\n   * @param {*} startNode\n   */\n  async bfs (startNode) {\n    const visitedObject = () => {\n      let arr = {}\n      for (let key of this.adjacentList.keys()) {\n        arr[key] = false\n      }\n      return arr\n    }\n    const graphVisited = []\n    let visited = await visitedObject()\n    let queue = []\n\n    visited[startNode] = true\n    queue.push(startNode)\n\n    while (queue.length) {\n      let current = queue.pop()\n      graphVisited.push(current)\n\n      let arr = this.adjacentList.get(current)\n\n      arr.forEach(elem => {\n        if (!visited[elem]) {\n          visited[elem] = true\n          queue.unshift(elem)\n        }\n      })\n    }\n\n    return graphVisited\n  }\n}\n"]}