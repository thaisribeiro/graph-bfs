{"version":3,"sources":["GraphService.js"],"names":["GraphService","router","get","graphSchema","request","response","next","graph","Graph","object","fs","readFileSync","JSON","parse","vertex","nodes","map","node","id","forEach","addVertex","v","links","link","addEdge","source","target","mapAdjacent","print","first","bfs","params","visitOrder","status","json","data","ResourceNotFound"],"mappings":";AACA,wB;AACA,0C;AACA,8D;AACA,sD;AACA,0C;AACA;;;AAGqBA,Y;AACnB;;;;AAIA,wBAAaC,MAAb,EAAqB;AACnBA,WAAOC,GAAP,CAAW,aAAX,EAA0B,2BAAYC,gBAAYD,GAAxB,CAA1B,EAAwD,KAAKA,GAA7D;AACD;;AAED;;;;;;;AAOWE,a,EAASC,Q,EAAUC,I;;AAEtBC,qB,GAAQ,IAAIC,eAAJ,E;AACRC,sB,GAASC,aAAGC,YAAH,CAAgB,cAAhB,EAAgC,OAAhC,C;AACbF,yBAASG,KAAKC,KAAL,CAAWJ,MAAX,CAAT;;AAEIK,sB,GAASL,OAAOM,KAAP,CAAaC,GAAb,CAAiB,wBAAQC,KAAKC,EAAb,EAAjB,C;;AAEbJ,uBAAOK,OAAP,CAAe,qBAAKZ,MAAMa,SAAN,CAAgBC,CAAhB,CAAL,EAAf;;AAEAZ,uBAAOa,KAAP,CAAaH,OAAb,CAAqB,UAACI,IAAD,UAAUhB,MAAMiB,OAAN,CAAcD,KAAKE,MAAnB,EAA2BF,KAAKG,MAAhC,CAAV,EAArB;;AAEMC,2B,GAAcpB,MAAMqB,KAAN,E;AACJd,sB,MAATe,K;AACyBtB,wBAAMuB,GAAN,CAAU1B,QAAQ2B,MAAR,CAAeb,EAAf,GAAoBJ,OAAOV,QAAQ2B,MAAR,CAAeb,EAAtB,CAApB,GAAgDW,KAA1D,C,gCAArBG,U;;AAEX3B,yBAAS4B,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACxBD,0BAAQ,SADgB,EACLE,MAAM,EAAEH,sBAAF,EAAcL,wBAAd,EADD,EAA1B,E;;;AAIArB,qBAAK,IAAI8B,0BAAJ,EAAL,E,0MApCepC,Y","file":"GraphService.js","sourceRoot":"/home/thais/Documentos/graph-bfs/src/services","sourcesContent":["\nimport fs from 'fs'\nimport Graph from '../handlers/graph'\nimport ResourceNotFound from '../errors/ResourceNotFound'\nimport JoiValidate from '../handlers/joiValidate'\nimport graphSchema from '../schemas/graph'\n/**\n *\n */\nexport default class GraphService {\n  /**\n     *\n     * @param {*} router\n     */\n  constructor (router) {\n    router.get('/graph/:id?', JoiValidate(graphSchema.get), this.get)\n  }\n\n  /**\n   * Breadth First Search in Digraph\n   * @param {Object} request - HTTP Request\n   * @param {Number} request.params.id - Initial node index (0-8)\n   * @param {Object} response - HTTP Response\n   * @param {Function} next  - Middleware\n   */\n  async get (request, response, next) {\n    try {\n      let graph = new Graph()\n      let object = fs.readFileSync('./grafo.json', 'utf-8')\n      object = JSON.parse(object)\n\n      let vertex = object.nodes.map(node => node.id)\n\n      vertex.forEach(v => graph.addVertex(v))\n\n      object.links.forEach((link) => graph.addEdge(link.source, link.target))\n\n      const mapAdjacent = graph.print()\n      const [first] = vertex\n      const { ...visitOrder } = await graph.bfs(request.params.id ? vertex[request.params.id] : first)\n\n      response.status(200).json({\n        status: 'sucesso', data: { visitOrder, mapAdjacent }\n      })\n    } catch (error) {\n      next(new ResourceNotFound())\n    }\n  }\n}\n"]}