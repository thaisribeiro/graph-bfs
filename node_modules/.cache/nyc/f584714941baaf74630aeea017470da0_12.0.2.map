{"version":3,"sources":["joiValidate.js"],"names":["joiValidate","validations","req","res","next","errors","options","globalOptions","defaultOptions","Object","keys","unknownMap","forEach","key","allowUnknown","entireContext","contextRequest","valida","length","message_error","map","item","value","messages","JoiError","validate","allowUnknownHeaders","allowUnknownBody","allowUnknownQuery","allowUnknownParams","allowUnknownCookies","status","statusText","headers","body","query","params","cookies","errObj","request","schema","location","context","joiOptions","abortEarly","Joi","details","assign","errorExists","find","field","error","path","push","message","types","type"],"mappings":"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","file":"joiValidate.js","sourceRoot":"/home/thais/Documentos/graph-bfs/src/handlers","sourcesContent":["import Joi from 'joi'\nimport JoiError from '../errors/JoiError'\nimport {\n  mergeDeepLeft\n} from 'ramda'\n\nexport default function joiValidate(validations) {\n  const defaultOptions = {\n    contextRequest: false,\n    allowUnknownHeaders: true,\n    allowUnknownBody: true,\n    allowUnknownQuery: true,\n    allowUnknownParams: true,\n    allowUnknownCookies: true,\n    status: 400,\n    statusText: 'Bad Request'\n  }\n  const globalOptions = {}\n\n  const unknownMap = {\n    headers: 'allowUnknownHeaders',\n    body: 'allowUnknownBody',\n    query: 'allowUnknownQuery',\n    params: 'allowUnknownParams',\n    cookies: 'allowUnknownCookies'\n  }\n\n  async function validate(req, res, next) {\n    const errors = []\n    const options = mergeDeepLeft({}, validations.options, globalOptions, defaultOptions)\n\n    await Object.keys(unknownMap).forEach((key) => {\n      const allowUnknown = options[unknownMap[key]]\n      const entireContext = options.contextRequest ? req : null\n      if (validations[key]) valida(errors, req[key], validations[key], key, allowUnknown, entireContext)\n    })\n\n    if (errors.length === 0) return next()\n    const message_error = errors.map((item, value) => {\n      return item.messages[0]\n    })\n\n    next(new JoiError(message_error))\n  }\n\n  return validate\n}\n\nfunction valida(errObj, request, schema, location, allowUnknown, context) {\n  if (!request || !schema) return\n\n  const joiOptions = {\n    context: context || request,\n    allowUnknown: allowUnknown,\n    abortEarly: false\n  }\n\n  Joi.validate(request, schema, joiOptions, function (errors, value) {\n    if (!errors || errors.details.length === 0) return Object.assign(request, value)\n\n    errors.details.forEach(error => {\n      const errorExists = errObj.find((item) => {\n        if (item && item.field === error.path && item.location === location) {\n          item.messages.push(error.message)\n          item.types.push(error.type)\n          return item\n        }\n        return\n      })\n\n      if (!errorExists) {\n        errObj.push({\n          field: error.path,\n          location: location,\n          messages: [error.message],\n          types: [error.type]\n        })\n      }\n    })\n\n  })\n\n}\n"]}