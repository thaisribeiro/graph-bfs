'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = require('babel-runtime/helpers/extends');var _extends3 = _interopRequireDefault(_extends2);var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require('babel-runtime/helpers/createClass');var _createClass3 = _interopRequireDefault(_createClass2);var _bugsnag = require('bugsnag');var _bugsnag2 = _interopRequireDefault(_bugsnag);
var _express = require('express');var _express2 = _interopRequireDefault(_express);
var _expressServiceDiscovery = require('./src/expressServiceDiscovery');var _expressServiceDiscovery2 = _interopRequireDefault(_expressServiceDiscovery);
var _expressMiddlewares = require('./src/expressMiddlewares');var _expressMiddlewares2 = _interopRequireDefault(_expressMiddlewares);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var defaultOptions = {
  name: 'Project Name',
  port: 3000,
  services: {
    container: [] },

  environment: 'development',
  serverless: false,
  bugsnag: {
    active: false,
    key: null },

  cors: {
    enable: true },

  compression: true


  /**
                     * @class ExpressApplication
                     */ };var
ExpressApplication = function () {
  /**
                                   * @param {Object} _options - Configuration options
                                   */
  function ExpressApplication() {var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};(0, _classCallCheck3.default)(this, ExpressApplication);
    var options = (0, _extends3.default)({}, defaultOptions, opts);
    var app = (0, _express2.default)();

    this.express = app;
    this.options = options;
    this.isServerless = options.serverless;
    this.stage = options.environment;

    var middlewares = new _expressMiddlewares2.default(this);
    middlewares.config();

    var serviceDiscovery = new _expressServiceDiscovery2.default(this.express);
    serviceDiscovery.discovery(options.services.container);
  }

  /**
     * Init Application
     */(0, _createClass3.default)(ExpressApplication, [{ key: 'init', value: function init()
    {var _this = this;
      if (!this.isServerless) {
        this.express.listen(this.options.port, function () {
          console.log(_this.options.name + ' listen on ' + _this.options.port);
        });
      }
    }

    /**
       * Error Handling
       */ }, { key: 'errorHandling', value: function errorHandling()
    {var _this2 = this;var registeredErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      this.express.use(function (err, request, response, next) {
        if (_this2.stage === 'production') {
          _bugsnag2.default.notify(err);
        }

        if (err.hasOwnProperty('message') && err.message === 'validation error') {
          return response.status(err.status).json(err);
        }

        if (registeredErrors.includes(err.name)) {
          return response.status(err.errorCode || 400).json({ message: err.message, code: err.errorCode });
        }

        return response.status(500).json({ message: 'Unexpected error.' });
      });
    } }]);return ExpressApplication;}();exports.default = ExpressApplication;